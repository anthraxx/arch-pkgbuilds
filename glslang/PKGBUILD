# Maintainer: Sven-Hendrik Haase <svenstaro@archlinux.org>

# Careful when upgrading this package! It usually breaks ABI without bumping
# soname. Also, be very mindful of the version of spirv-tools that this links
# to. Upstream actually expects the uae of the particular commits of
# spirv-tools and spirv-headers that are provided in known_good.json. However,
# if we went that route, we'd have to vendor the resulting spirv-tools libs
# from this glslang build and they would be incompatible with system libs,
# resulting in us having to ship both. Instead, I recommend just waiting until
# upstream releases a compatible version of spirv-tools, then updating the
# spriv-tools system package and only then building glslang against that.
pkgname=glslang
pkgver=11.13.0
pkgrel=2
pkgdesc='OpenGL and OpenGL ES shader front end and validator'
arch=('x86_64')
url='https://github.com/KhronosGroup/glslang'
license=('BSD')
depends=('gcc-libs' 'python')
makedepends=('cmake' 'ninja' 'git' 'spirv-tools' 'spirv-headers')
options=('staticlibs')
# Get the commits from known_good.json for every release
source=(${pkgname}-${pkgver}.tar.gz::https://github.com/KhronosGroup/glslang/archive/${pkgver}.tar.gz)
sha256sums=('592c98aeb03b3e81597ddaf83633c4e63068d14b18a766fd11033bad73127162')

<<<<<<< .mine
prepare() {
  # Sadly, glslang requires super specific versions of SPIRV headers and
  # spirv-tools and so I'm afraid that for the time being we'll have to use
  # their vendored version until we figure out a good way to use system
  # libraries.
  cp -r SPIRV-Tools ${pkgname}-${pkgver}/External/spirv-tools
  cp -r SPIRV-Headers ${pkgname}-${pkgver}/External/spirv-tools/external/spirv-headers
}

||||||| .r464504
prepare() {
  # Sadly, glslang requires super specific versions of SPIRV headers and
  # spirv-tools and so I'm afraid that for the time being we'll have to use
  # their vendored version until we figure out a good way to use system
  # libraries.
  cp -r SPIRV-Tools ${pkgname}-${pkgver}/External/spirv-tools
  cp -r SPIRV-Headers ${pkgname}-${pkgver}/External/spirv-tools/external/spirv-headers
  # do not include non-existent /usr/include/External paths in INTERFACE_INCLUDE_DIRECTORIES
  # as that breaks consumers during build
  patch -Np1 -d $pkgname-$pkgver -i ../$pkgname-11.13.0-cmake_include_dirs.patch
}

=======
>>>>>>> .r465242
build() {
  cd ${pkgname}-${pkgver}

  # we need fat LTO objects to not break consumers during linking
  CXXFLAGS+=" -ffat-lto-objects"
  cmake \
    -Bbuild-shared \
    -GNinja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=None \
    -DBUILD_SHARED_LIBS=ON
  ninja -Cbuild-shared
  cmake \
    -Bbuild-static \
    -GNinja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=None \
    -DBUILD_SHARED_LIBS=OFF
  ninja -Cbuild-static
}

check() {
  cd ${pkgname}-${pkgver}
  ninja -Cbuild-shared test
}

package() {
  cd ${pkgname}-${pkgver}
  DESTDIR="${pkgdir}" ninja -C build-shared install
  DESTDIR="${pkgdir}" ninja -C build-static install

  install -Dm644 LICENSE.txt "${pkgdir}"/usr/share/licenses/${pkgname}/LICENSE

  cd "${pkgdir}"/usr/lib
  for lib in *.so; do
    ln -sf "${lib}" "${lib}.0"
  done
<<<<<<< .mine

  # Delete the stuff that's been vendored in. It's not ideal but that's we'll deal with for now.
  mv "${pkgdir}"/usr/bin/spirv-remap .
  #rm -r "${pkgdir}"/usr/{bin/spirv*,include/spirv-tools,lib/cmake/SPIRV-Tools*,lib/libSPIRV-*,lib/pkgconfig}
  mv spirv-remap "${pkgdir}"/usr/bin/spirv-remap
||||||| .r464504

  # Delete the stuff that's been vendored in. It's not ideal but that's we'll deal with for now.
  mv "${pkgdir}"/usr/bin/spirv-remap .
  rm -r "${pkgdir}"/usr/{bin/spirv*,include/spirv-tools,lib/cmake/SPIRV-Tools*,lib/libSPIRV-*,lib/pkgconfig}
  mv spirv-remap "${pkgdir}"/usr/bin/spirv-remap
=======
>>>>>>> .r465242

  bash
}

# vim: ts=2 sw=2 et:
