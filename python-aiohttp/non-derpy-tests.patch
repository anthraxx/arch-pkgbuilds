diff --git a/tests/test_client_request.py b/tests/test_client_request.py
index 037b7f47b..be35afd1c 100644
--- a/tests/test_client_request.py
+++ b/tests/test_client_request.py
@@ -276,12 +276,6 @@ def test_host_header_ipv6_with_port(make_request) -> None:
     assert req.headers["HOST"] == "[::2]:99"
 
 
-@pytest.mark.xfail(
-    PY_310,
-    reason="No idea why ClientRequest() is constructed out of loop but "
-    "it calls `asyncio.get_event_loop()`",
-    raises=DeprecationWarning,
-)
 def test_default_loop(loop) -> None:
     asyncio.set_event_loop(loop)
     req = ClientRequest("get", URL("http://python.org/"))
diff --git a/tests/test_proxy_functional.py b/tests/test_proxy_functional.py
index 32dc4f6dc..fe5023257 100644
--- a/tests/test_proxy_functional.py
+++ b/tests/test_proxy_functional.py
@@ -125,7 +125,6 @@ def _pretend_asyncio_supports_tls_in_tls(
     )
 
 
-@secure_proxy_xfail_under_py310_linux(raises=ClientProxyConnectionError)
 @pytest.mark.parametrize(
     "web_server_endpoint_type",
     (
@@ -168,7 +167,6 @@ async def test_secure_https_proxy_absolute_path(
     await asyncio.sleep(0.1)
 
 
-@secure_proxy_xfail_under_py310_linux(raises=AssertionError)
 @pytest.mark.xfail(
     not PY_37,
     raises=RuntimeError,
diff --git a/tests/test_streams.py b/tests/test_streams.py
index 764b377ff..648e24e7e 100644
--- a/tests/test_streams.py
+++ b/tests/test_streams.py
@@ -83,12 +83,6 @@ class TestStreamReader:
         with pytest.raises(RuntimeError):
             await stream._wait("test")
 
-    @pytest.mark.xfail(
-        PY_310,
-        reason="No idea why ClientRequest() is constructed out of loop but "
-        "it calls `asyncio.get_event_loop()`",
-        raises=DeprecationWarning,
-    )
     def test_ctor_global_loop(self) -> None:
         loop = asyncio.new_event_loop()
         asyncio.set_event_loop(loop)
diff --git a/tests/test_web_app.py b/tests/test_web_app.py
index 8a1c2659a..c507a6311 100644
--- a/tests/test_web_app.py
+++ b/tests/test_web_app.py
@@ -40,12 +40,6 @@ async def test_set_loop() -> None:
         assert app.loop is loop
 
 
-@pytest.mark.xfail(
-    PY_310,
-    reason="No idea why _set_loop() is constructed out of loop "
-    "but it calls `asyncio.get_event_loop()`",
-    raises=DeprecationWarning,
-)
 def test_set_loop_default_loop() -> None:
     loop = asyncio.new_event_loop()
     asyncio.set_event_loop(loop)
